{"version":3,"sources":["components/AddCategory.js","helpers/getFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","placeholder","type","value","onChange","target","getFetchGifs","category","a","url","encodeURI","fetch","res","json","data","onlyGifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMA0CeA,EAvCK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAELC,mBAAU,IAFL,mBAElCC,EAFkC,KAEtBC,EAFsB,KAoBzC,OACI,sBAAMC,SAZW,SAAEC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAG3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAe,MAKnB,SACI,uBAEIO,YAAY,uBACZC,KAAK,OACLC,MAAQV,EACRW,SAvBc,SAAER,GAExBF,EAAeE,EAAES,OAAOF,a,+BCRnBG,EAAY,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGlBC,EAHkB,iDAG+BC,UAAWH,GAH1C,+DAINI,MAAOF,GAJD,cAIlBG,EAJkB,gBAKDA,EAAIC,OALH,uBAKhBC,EALgB,EAKhBA,KAGFC,EAAWD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE9B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAK1Ca,QAAQC,IAAKR,GAlBW,kBAmBjBA,GAnBiB,4CAAH,sDCcVS,EAbK,SAAC,GAAyB,EAAtBN,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAK/B,OACI,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,4BAAKA,GAAgB,iBCuBlBS,EA7BC,SAAC,GAAoB,IAAjBrB,EAAgB,EAAhBA,SAAgB,ECCR,SAAEA,GAAe,IAAD,EAEdf,mBAAS,CAC/BsB,KAAM,GACNe,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA6BxC,OAfAC,qBAAW,WAEP1B,EAAcC,GACT0B,MAAM,SAAAC,GAGHH,EAAU,CACNjB,KAAMoB,EACNL,SAAS,SAKtB,IAEIC,ED5B2BK,CAAc5B,GAAnCa,EAFmB,EAExBN,KAAce,EAFU,EAEVA,QAGtB,OACI,qCACI,oBAAIJ,UAAU,wCAAd,SAAwDlB,IAGtDsB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEQL,EAAOJ,KAAK,SAAAC,GAAG,OAEX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEavBkB,EA9BM,WAAQ,MAKa5C,mBAAU,CAAE,YALzB,mBAKjB6C,EALiB,KAKL9C,EALK,KAOzB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAGQ8C,EAAWrB,KAAK,SAAAT,GAAQ,OAEpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCflC+B,IAASC,OAEP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.748d7337.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState( '' );\n\n    const handleInputChange = ( e ) => {\n        // console.log( e.target.value );\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2 ) {\n            \n            // Como no tengo acceso a las categorias del componente padre, tengo que usar un callback así tengo una referencia a ese array.\n            setCategories( cats => [ inputValue, ...cats ] );\n            setInputValue( '' ); // Para que no se creen valores con el mismo key.\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                // required\n                placeholder='Ingrese gif a buscar'\n                type='text'\n                value={ inputValue }\n                onChange={ handleInputChange } \n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n\n\nexport default AddCategory\n","// Función para consumir los datos de la Fetch API\nexport const getFetchGifs = async( category ) => {\n\n    // encondeURI = Va a encargarse de los espacios en blanco, es decir, de los caracteres de escape como por ejemplo: los va a transformar en '%20'\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=20&api_key=Nt4ACMs0TBmsydLDNeElO00qxCJaqUTp`; \n    const res = await fetch( url );\n    const { data } = await res.json();\n    \n    // No me interesan todos los datos que me proporciona la data, solo algunos por eso mapeo...\n    const onlyGifs = data.map( img => {\n\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url // images? = Preguntamos que si viene una imagen, vamos a utilizar esta prop\n        }\n\n    });\n\n    console.log( onlyGifs );\n    return onlyGifs;\n\n}\n","import React from 'react'\n\nconst GifGridItem = ( { id, title, url } ) => {\n\n    // console.log( id, title, url );\n    // console.log( { id, title, url} );\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{ title ? title : 'No title' }</p>\n        </div>\n    )\n}\n\nexport default GifGridItem;\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ( { category } ) => {\n  \n    const { data:images , loading } = useFetchGifs( category );\n    // data:images = le agregamos un alias a la data, en esta caso las img.\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeInDown\">{ category }</h3>\n\n            {/* Operación lógica AND, si es true entonces evalua el primero, sino no evalua nada. */}\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n\n            <div className=\"card-grid\">\n                {\n                    images.map( img  => (\n\n                        <GifGridItem \n                            key={ img.id }\n                            { ...img } // Estoy enviando cada una de las props de las img como una prop independiente.\n                            // img={ img } \n                        />\n\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid;\n","import { useEffect, useState } from \"react\";\nimport { getFetchGifs } from \"../helpers/getFetchGifs\";\n\n// Custom HOOK\n// Funcionan como si fuera functional components, pueden tener efectos, pueden usar reducer, contextos\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    // Me permite poder ejecutar código de manera condicional, es decir,\n    // solamente quiero que se ejecute esa condición cuando el componente es RENDERIZADO por PRIMERA vez. ( NO PUEDEN SER async )\n    // ( Analogía al patrón de diseño Singleton )\n    //     1er param = función a ejecutar\n    //     2do param = [] de dependencias\n\n    // Si la catergoria cambia entonces se ejecuta de nuevo el useEffect\n    useEffect( () => {\n\n        getFetchGifs( category )\n            .then( imgs => {\n\n                // console.log(imgs);\n                setState( {\n                    data: imgs,\n                    loading: false\n                });\n\n            });\n\n    }, [])\n\n    return state; // { data: [], loading: true }\n\n};","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = (  ) => {\n\n    // const categoriesDefault = [ 'Kimetsu no Yaiba', 'Shingeki no kyojin', 'Made in abyss' ];\n    // const [ categories, setCategories ] = useState( categoriesDefault );\n\n    const [ categories, setCategories ] = useState( [ 'Tanjiro' ] );\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n\n            <ol>\n                { \n                    // El key NO PUEDE ser el índice y TIENE QUE SER único.\n                    categories.map( category =>\n\n                        <GifGrid\n                            key={ category }\n                            category={ category } \n                        />\n                        \n                    )              \n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  \n  <GifExpertApp />,\n  document.getElementById('root')\n\n);"],"sourceRoot":""}